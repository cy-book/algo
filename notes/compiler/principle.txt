第一章 理解代码
    1.编译原理的前端和后段
        前端‘ 词法分析 、 语法分析 、 语义分析 ’
        后段 ’生成中间代码 、优化、 生成目标代码 ‘

    2.前端介绍
        词法分析：
            （1） token { 标识符， 操作符， 字面量 }
            （2） 状态机
                （例： 马桶 {
                            两个状态 { 注水， 水满}
                            冲水（阀门打开） ：  水满 -> 注水
                            阀门关闭（）     ：  注水 -> 水满
                       }
             （3） 词法分析器 ：它分析整个程序的字符串，当遇到不同的字符时，会驱使它迁移到不同的状态。

        语法分析
            （1） 抽象语法树 （AST)
                    语法分析的过程就是构造抽象语法树的过程

                i. 使用clang 生成 ast
                        clang -cc1 -ast-dump hello.c
                ii. javascript 程序生成语法树
                        https://resources.jointjs.com/demos/javascript-ast
            （2）构造语法树
                i.自顶而下 {递归下降分析}
                    例如：
                        首先构造根节点，代表整个程序，之后向下扫描 Token 串，构建它的子节点。当它看到一个 int 类型的 Token
                    时，知道这儿遇到了一个变量声明语句，于是建立一个“变量声明”节点；接着遇到 age，建立一个子节点，这是第一个
                    变量；之后遇到 =，意味着这个变量有初始化值，那么建立一个初始化的子节点；最后，遇到“字面量”，其值是 45。

                ii.自底向上 {归约}

        语义分析
            （1）某个表达式的计算结果是什么数据类型？如果有数据类型不匹配的情况，是否要做自动转换？
            （2）如果在一个代码块的内部和外部有相同名称的变量，我在执行的时候到底用哪个？ 就像“我喜
                欢又聪明又勇敢的你”中的“你”，到底指的是谁，需要明确。
            （3）在同一个作用域内，不允许有两个名称相同的变量，这是唯一性检查。你不能刚声明一个变量 a，
                紧接着又声明同样名称的一个变量 a，这就不允许了。


第二章 打造词法分析器
    详细见包 hz.xhxh.compiler.lexi

第三章 语法分析： 公式计算器

